ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
setwd("C:/Users/Will/Class/R_Analysis/01_Demo")
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
demo_table2 <- fromJSON(txt='demo.json')
library(jsonlite)
library(ggplot)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% groy(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #add boxplot with labels rotated 45 degrees
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
library(tidyverse)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #add boxplot with labels rotated 45 degrees
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
shapiro.test(mtcars$wt)
?sample_n()
setwd("C:/Users/Will/Class/R_Analysis/02_15.6")
View(plt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
#T-Test
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
#15.6.4
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
#15.6.5
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
summary(aov(hp ~ cyl,data=mtcars_filt)) #compare means across multiple levels
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt + geom_point() #create a scatter plot
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
View(used_matrix)
cor(used_matrix)
?lm()
#15.7.2
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#15.7.3
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
#15.8.1
table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
#15.8.1
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/Will/Class/MechaCar_Statistical_Analysis")
library(dplyr)
?read_csv()
mpg <- read_csv("MechaCar_mpg.csv")
View(mpg)
View(mpg)
lm(mpg ~ vehicle_length + vehicle_width + spoiler_angle + ground_clearance + AWD,data=mpg #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_width + spoiler_angle + ground_clearance + AWD,data=mpg)) #generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_width + spoiler_angle + ground_clearance + AWD,data=mpg) #generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mpg) #generate multiple linear regression model
library(dplyr)
mpg <- read_csv("MechaCar_mpg.csv")#setup dataframe
linreg <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mpg) #generate multiple linear regression model
summary(linreg)
scoil <- read_csv("Suspension_Coil.csv")#setup dataframe
View(scoil)
mpg <- read_csv("MechaCar_mpg.csv")#setup dataframe
library(dplyr)
library(jsonlite)
library(ggplot)
library(tidyverse)
mpg <- read_csv("MechaCar_mpg.csv")#setup dataframe
linreg <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mpg) #generate multiple linear regression model
summary(linreg)
scoil <- read_csv("Suspension_Coil.csv")#setup dataframe
?summarise()
scoil <- read_csv("Suspension_Coil.csv")#setup dataframe
total_summary <- summarize(scoil)
View(total_summary)
total_summary <- summarize(scoil$PSI)
View(total_summary)
scoil <- read_csv("Suspension_Coil.csv")#setup dataframe
scoil_psi <- scoil
total_summary <- summarize(scoil$"PSI")
total_summary <- summarize(scoil[scoil$"PSI"])
rlang:last_error()
rlang::last_error()
scoil[scoil$"PSI"]
scoil[scoil$"PSI"]
scoil["PSI"]
summarize(scoil["PSI"])
total_summary <- summarize(scoil["PSI"])
View(total_summary)
#DELIVERABLE 2
scoil <- read_csv("Suspension_Coil.csv")#setup dataframe
scoil_psi <- scoil
total_summary <- scoil  %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep') #create summary table with multiple columns
library(dplyr)
library(jsonlite)
library(ggplot)
library(tidyverse)
#DELIVERABLE 2
scoil <- read_csv("Suspension_Coil.csv")#setup dataframe
scoil_psi <- scoil
total_summary <- scoil  %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep') #create summary table with multiple columns
total_summary <- scoil  %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create summary table with multiple columns
View(total_summary)
scoil <- read_csv("Suspension_Coil.csv")#setup dataframe
scoil_psi <- scoil
total_summary <- scoil  %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create summary table with multiple columns
lot_summary <- scoil  %>% group_by("Manufacturing_Lot") %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create summary table with multiple columns
View(lot_summary)
lot_summary <- scoil  %>% group_by("Manufacturing_Lot") %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create summary table with multiple columns
View(lot_summary)
total_summary <- scoil  %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create summary table with multiple columns
lot_summary <- scoil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create summary table with multiple columns
View(total_summary)
View(lot_summary)
?t.test()
t.test((scoil$PSI),mu=1500) #compare sample versus population means
t.test((lot_summary[1,"Mean"]), mu=1500) #lot 1
View(mpg)
View(scoil)
View(scoil_psi)
View(scoil)
View(scoil_psi)
View(scoil)
filter_lot1 <- scoil[scoil$Manufacturing_Lot == Lot1]
filter_lot1 <- scoil[scoil$Manufacturing_Lot == 'Lot1']
scoil_lot1 <- subset(scoil, Manufacturing_Lot == 'Lot1')
View(scoil_lot1)
scoil_lot1 <- subset(scoil, Manufacturing_Lot == 'Lot1')
scoil_lot2 <- subset(scoil, Manufacturing_Lot == 'Lot2')
scoil_lot3 <- subset(scoil, Manufacturing_Lot == 'Lot3')
t.test((scoil_lot1$PSI),mu=1500) #lot 1
t.test((scoil_lot2$PSI),mu=1500) #lot 2
t.test((scoil_lot3$PSI),mu=1500) #lot 3
